.metaballsContainer {
	width: 500px;
	height: 500px;
	position: relative;
}

.metaballsContainer .bg,
.metaballsContainer .fg {
	position: absolute;
	top: 0px;
	left: 0px;
	width: 100%;
	height: 100%;
	mix-blend-mode: multiply; /*The bg will have white metaballs while the fg white background. The multiplication isthe the wanted*/
	overflow: hidden; /*Without this property there may be some weird effects near the borders*/
}

.constrastContainer {
	background-color: white;
	height: 100%;
	width: 100%;
	mix-blend-mode: screen; /*With screen, the background color and the metaballs color will be set on the repective contrastContainer*/
}

/*Both contrast containers provide contrast to the metaballs*/
.fg .constrastContainer {
	-webkit-filter: contrast(100000%);
	filter: contrast(100000%);
}

/**The contrast container on the background is inverted so it will show the metaballs in white*/
.bg .constrastContainer {
	-webkit-filter: contrast(100000%) invert();
	filter: contrast(100000%) invert();
}

.blurContainer {
	/*The blur filter is used to attract metaballs together. It causes border to fade out, so a high contrast is applied by the parent element (contrastContainer)*/
	-webkit-filter: blur(var(--blurIntensity));
	filter: blur(var(--blurIntensity));

	width: 100%;
	height: 100%;
}

/*Rapresents a metaball, must be colored black*/
.ball {
	border-radius: 50%;
	background-color: black;
	position: absolute;
}

.b1 {
	height: 100px;
	width: 100px;
	top: 100px;
	left: 200px;
}

.b2 {
	height: 200px;
	width: 200px;
	top: 100px;
	animation: updown 1s ease-in-out infinite alternate;
}

/*This ball follows the mouse*/
.bmousefollow {
	height: 150px;
	width: 150px;
	top: var(--mouseY);
	left: var(--mouseX);
	transform: translateX(-50%) translateY(-50%);
}

/*A demo animation for the second ball*/
@keyframes updown {
	0% {
		top: 100px;
	}
	100% {
		top: 200px;
	}
}
